package hgcore.core;

import java.awt.BorderLayout;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;

import javax.swing.JFrame;
import javax.swing.JLabel;

import org.opencv.core.Core;
import org.opencv.core.Mat;

public class HG_Core extends JFrame{
	private static final long serialVersionUID = 1L;
	
	private JLabel scene = new JLabel("Hello world!");

	public HG_Core()	{
		super("Core");
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
		
		setLayout(new BorderLayout());
		add(scene);
	}//construct
	
	
	//main must be replaced with a run function after it becomes a Thread
	public static void main(String []args)	{
		
		/*temp UI*/
		HG_Core frame = new HG_Core();
		frame.setSize(500,500);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
		
		/*temp UI*/
		
		
		while(true)	{
			System.out.println("Hello");
		}//while
		
	}//main
	
	public static BufferedImage matToBufferedImage(Mat m) { 
		int type = BufferedImage.TYPE_BYTE_GRAY;
        if ( m.channels() > 1 ) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int bufferSize = m.channels()*m.cols()*m.rows();
        byte [] b = new byte[bufferSize];
        m.get(0,0,b); // get all the pixels
        BufferedImage image = new BufferedImage(m.cols(),m.rows(), type);
        final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        System.arraycopy(b, 0, targetPixels, 0, b.length);  
        return image;

	}//metToBufferedImage
}//class